( function( $ ) {
	$.fn.wScreencasts = function( options ) {

		return this.each( function() {

			var $screencast = $( this ),
				$screencastTabs = $screencast.find( '.screencasts-section-button' ),
				$screencastItems = $screencast.find( '.screencasts-item:not(.screencasts-item-soon)' ),
				$screencastVideoHtml = $screencast.find( '.screencasts-content' ),
				$screencastToggleMobile = $screencast.find( '.screencasts-toggle-mobile' ),
				screencastJson = {},
				isScrolling = false,
				headerHeight = 0;

			var screencastJsonDiv = $screencast.find( '.us-screencasts-json' );
			if ( ! screencastJsonDiv.length ) {
				return;
			}

			screencastJson = screencastJsonDiv[ 0 ].onclick() || {};
			screencastJsonDiv.remove();

			headerHeight = 0;
			$us.header.on( 'transitionEnd', function( header ) {
				headerHeight = header.getCurrentHeight( /* adminBar */true );
			}.bind( this ) );

			var screencastInitVideo = function( postID ) {
				// Get player data.
				var data = $.extend( { player_id: '', player_api: '', player_html: '' }, screencastJson[ postID ] || {} );

				// If there is no API in the document yet, then add to the head.
				if ( data.player_api && ! $( 'script[src="' + data.player_api + '"]' ).length ) {
					$( 'head' ).append( '<script src="'+ data.player_api +'"></script>' );
				}

				$screencastVideoHtml.html( screencastJson[ postID ].player_html );
			}

			// Reset autoplay for first video
			function screencastRemoveAutoplay( videoID ) {
				var iframe = $( screencastJson[ videoID ].embed_html ).get( 0 );
				iframe.src = iframe.src.replace( 'autoplay=1', 'autoplay=0' );

				$screencastVideoHtml.html( iframe );
			}

			// Insert first section
			function screencastInsertFirst() {
				var $firstVideo =  $screencastItems.first(),
					$firstVideoSection = $firstVideo.parents( '.screencasts-section' ),
					firstVideoID = $firstVideo.data( 'video-id' );

				if ( firstVideoID !== undefined ) {

					$firstVideo.addClass( 'active' );
					$firstVideoSection.find( '.screencasts-section-button' ).addClass( 'active' );
					$firstVideoSection.find( '.screencasts-section-content' ).show();

					screencastRemoveAutoplay( firstVideoID );
				}
			}

			function screencastScrollToSection(){
				var top = $screencast.offset().top;

				if ( ! jQuery.isMobile ) {
					top -= $us.$canvas.offset().top || 0;
				}

				// Animate options
				var animateOptions = {
					duration: $us.canvasOptions.scrollDuration,
					easing: $us.getAnimationName( 'easeInOutExpo' ),
					start: function() {
						isScrolling = true;
					}.bind( this ),
					always: function() {
						isScrolling = false;
					}.bind( this ),
					/**
					 * Get and applying new values during animation.
					 *
					 * @param number now
					 * @param object fx
					 */
					step: function( now, fx ) {
						var newTop = top;
						// Since the header at the moment of scrolling the scroll can change the height,
						// we will correct the position of the element.
						if ( $us.header.isStickyEnabled() && $us.header.isHorizontal() ) {
							newTop -= headerHeight;
						}

						if ( fx.end !== newTop ) {
							$us.$htmlBody
								.stop( true, false )
								.animate( { scrollTop: newTop }, $.extend( animateOptions, {
									easing: $us.getAnimationName( 'easeOutExpo' )
								} ) );
						}
					}.bind( this )
				};
				$us.$htmlBody
					.stop( true, false )
					.animate( { scrollTop: top }, animateOptions );
			}

			// Check hash in url
			// If have, scroll to section and open video, else get first video
			var sectionHash = document.location.hash;
			if (
				sectionHash !== ''
				&& sectionHash.indexOf( 'screencast' ) > - 1
			) {
				sectionHash = sectionHash.replace( '#screencast-', '' );

				if ( ! screencastJson.hasOwnProperty( sectionHash ) ) {
					screencastInsertFirst();
				} else {
					// Insert screencats section by hash
					var openSection = $( '[data-video-id="' + sectionHash + '"]' )
							.addClass( 'active' )
							.parents( '.screencasts-section' );

					openSection.find( '.screencasts-section-button' ).addClass( 'active' );
					openSection.find( '.screencasts-section-content' ).show();

					// Insert video
					screencastRemoveAutoplay( sectionHash );

					// Scroll to section
					screencastScrollToSection();
				}
			} else {
				screencastInsertFirst();
			}

			// Open accordion
			$screencastTabs.on( 'click', function( e ) {
				e.preventDefault();

				$( this ).toggleClass( 'active' );
				$( this ).next().slideToggle( 200 );
			} );

			// Insert iframe video from json
			$screencastItems.on( 'click', function( e ) {
				e.preventDefault();

				var $item = $( this ),
					postID = $item.data( 'video-id' );

				if ( postID && ! screencastJson.hasOwnProperty( postID ) ) {
					return;
				}

				$screencastItems.removeClass( 'active' );
				$item.addClass( 'active' );

				screencastInitVideo( postID );

				window.location.hash = '#screencast-' + postID;
			} );

			// Toggle menu on mobile
			$screencastToggleMobile.on( 'click', function( e ) {
				e.preventDefault();

				$screencast.find( '.screencasts-sections' ).slideToggle( 200 );
			} );

			// Remove CSS from sections > 1000px
			$( window ).resize( function() {
				var _width = $( window ).width();
				if ( _width > 1000 ) {
					var _el = $screencast.find( '.screencasts-sections' ).get( 0 );
					if ( _el !== undefined ) {
						_el.style.removeProperty( 'display' );
					}
				}
			} );
		} );
	}
} )( jQuery );

jQuery( document ).ready( function() {
	jQuery( '.screencasts:first' ).wScreencasts();
} );

